Metadata-Version: 2.4
Name: pycrown_simplified
Version: 0.1
Summary: Simplified tree crown segmentation using CHM
Author: Igor Pawelec
Author-email: igor.pawelec@student.urk.edu.pl
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: numpy>=1.23
Requires-Dist: scipy>=1.9
Requires-Dist: scikit-image>=0.20
Requires-Dist: rasterio>=1.3
Requires-Dist: numba>=0.60
Requires-Dist: fiona>=1.9
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# PyCrown – Fast Raster‑Based Individual Tree Segmentation for LiDAR Data

Author: Igor Pawelec  
Published under GNU GPLv3

---

## Summary

PyCrown is a lightweight Python package for  
1. **Smoothing** a canopy height model (CHM)  
2. **Detecting** tree tops  
3. **Delineating** individual tree crowns using the Dalponte algorithm  
4. **Exporting** results as raw/VRT rasters and GeoPackage vector layers  

This is a simplified re‑implementation of [the original PyCrown](https://github.com/manaakiwhenua/pycrown), optimized for ease of use and integration into Python workflows.

## Features

- **CHM smoothing** with four filter options:  
  – `median` (robust to noise)  
  – `mean`/`average`  
  – `gaussian` (controlled blur)  
  – `maximum` (emphasize peaks)  
- **Tree‑top detection** via local maxima + center‑of‑mass  
- **Optional tree‑top correction** by clustering close maxima  
- **Crown delineation** in two modes:  
  – Standard Dalponte  
  – Circular (“circ”) variant for smoother crown shapes  
- **I/O utilities** to save:  
  – Segmentation masks as raw `.bin` + `.vrt`  
  – Crown polygons to GeoPackage  
  – Tree‑top points to GeoPackage  

## Installation

```bash
# From PyPI
pip install pycrown-simplified

# Or from source
git clone https://github.com/yourusername/pycrown_simplified.git
cd pycrown_simplified
pip install -e .

# Dependencies:
- Python ≥ 3.12
- numpy ≥ 1.23
- scipy ≥ 1.9
- scikit‑image ≥ 0.20
- rasterio ≥ 1.3
- numba ≥ 0.60
- fiona ≥ 1.9

# You can also create a conda environment:

```
conda env create -f environment.yaml
```

## Quickstart

```
import os
import numpy as np
import rasterio
import matplotlib.pyplot as plt
from pycrown import PyCrown
from pycrown.io_utils import (
    save_segments,
    vectorize_segments,
    save_tree_tops
)

# Paths & parameters
chm_path = "data/chm.tif"
out_dir   = "results"
base_name = os.path.splitext(os.path.basename(chm_path))[0]
os.makedirs(out_dir, exist_ok=True)

# Read CHM
with rasterio.open(chm_path) as src:
    chm       = src.read(1)
    transform = src.transform
    crs_wkt   = src.crs.to_wkt()

# Initialize
pc = PyCrown(chm_path)

# 1. Smooth CHM
smoothed = pc.smooth_chm(ws=5, method="gaussian")

# 2. Detect tree tops
tops     = pc.tree_detection(hmin=2.0, ws=5)
corrected = pc.correct_tree_tops(distance_threshold=5.0)

# 3. Delineate crowns
crowns = pc.crown_delineation(
    mode="circ",
    th_seed=0.7,
    th_crown=0.55,
    th_tree=2.0,
    max_crown=10.0
)

# 4. Save outputs
save_segments(crowns, out_dir, base_name + "_crowns", transform, crs_wkt)
vectorize_segments(crowns, out_dir, base_name + "_crowns", transform, crs_wkt)
save_tree_tops(corrected, out_dir, base_name, transform, crs_wkt)

```
## API Reference
PyCrown(chm_file: str)

    smooth_chm(ws: int = 3, method: str = "median") → ndarray
    Smooth the CHM.

    tree_detection(hmin: float = 2.0, ws: int = 3) → list[tuple]
    Detect raw tree‑top positions.

    correct_tree_tops(distance_threshold: float = 5.0) → ndarray
    Merge nearby peaks into single tops.

    crown_delineation(mode: str = "standard", th_seed: float = 0.7, th_crown: float = 0.55, th_tree: float = 15.0, max_crown: float = 10.0) → ndarray
    Label individual crowns.

## I/O Utilities (pycrown.io_utils)

- save_segments(segments, out_path, fname, transform, crs_wkt)
Write raw .bin + .vrt.

- vectorize_segments(segments, out_path, fname, transform, crs_wkt)
Export crown polygons to GeoPackage.

- save_tree_tops(tree_tops, out_path, fname, transform, crs_wkt)
Export detected tops as point GeoPackage.

## License

This project is released under the GNU General Public License v3.0.

Original implementation:
https://github.com/manaakiwhenua/pycrown
